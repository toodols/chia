Context {
    symtab: Symtab {
        variables: {
            my_number@3: (
                Number,
                LetDeclaration("my_number"),
            ),
            print@0: (
                Function(
                    [
                        Number,
                    ],
                    Unit,
                ),
                FunctionDeclaration("print"),
            ),
            something@3: (
                String,
                LetDeclaration("something"),
            ),
            something@4: (
                Number,
                LetDeclaration("something"),
            ),
            main@0: (
                Function(
                    [],
                    Number,
                ),
                FunctionDeclaration("main"),
            ),
            to_number@0: (
                Function(
                    [
                        String,
                    ],
                    Number,
                ),
                FunctionDeclaration("to_number"),
            ),
            value@1: (
                Number,
                FunctionDeclaration("print"),
            ),
            from@2: (
                String,
                FunctionDeclaration("to_number"),
            ),
        },
        types: {},
        structs: {},
        parents: {
            ScopeId(
                2,
            ): ScopeId(
                0,
            ),
            ScopeId(
                4,
            ): ScopeId(
                3,
            ),
            ScopeId(
                3,
            ): ScopeId(
                0,
            ),
            ScopeId(
                1,
            ): ScopeId(
                0,
            ),
        },
    },
    scopes_by_node_id: {
        29: ScopeId(
            4,
        ),
        34: ScopeId(
            3,
        ),
        14: ScopeId(
            2,
        ),
        36: ScopeId(
            0,
        ),
        6: ScopeId(
            1,
        ),
    },
    scope_counter: 5,
}